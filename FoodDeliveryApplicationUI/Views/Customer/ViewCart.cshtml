\@model IEnumerable<FoodDeliveryApplicationUI.Models.CartViewModel>

@{
    ViewBag.Title = "View Cart";
}

<style>
    /* Custom styling for the Quantity column */
    .quantity-column {
        width: 150px; /* Adjust the width as needed */
    }
</style>

<div class="container">
    <h2>Your Shopping Cart</h2>

    @if (Model.Count() > 0)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Image</th>
                    <th>Product</th>
                    <th class="quantity-column text-center">Quantity</th>
                    <th class="text-center">Price</th>
                    <th>Subtotal</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td><img src="~/Images/@item.ImageFileName" alt="Product Image" style="max-width: 100px; max-height: 100px;" /></td>
                        <td>@item.ProductName</td>
                        <td class="quantity-column">
                            <div class="input-group">
                                <span class="input-group-btn">
                                    <button class="btn btn-default font-weight-bold fw-50 text-danger" onclick="updateQuantity(@item.CartId, -1)">-</button>
                                </span>
                                <input type="text" class="form-control text-center font-weight-bold" id="quantity_@item.CartId" value="@item.Quantity" readonly />
                                <span class="input-group-btn">
                                    <button class="btn btn-default font-weight-bold text-success" onclick="updateQuantity(@item.CartId, 1)">+</button>
                                </span>
                            </div>
                        </td>
                        <td class="text-center">@item.Price</td>
                        <td>@(item.Quantity * item.Price)</td>
                        <td>
                            <button class="btn btn-danger" onclick="removeItem(@item.CartId)">Remove</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <p>Total: $@(Model.Sum(item => item.Quantity * item.Price))</p>

        <button class="btn btn-success" onclick="placeOrder()">Place Order</button>
    }
    else
    {
        <p>Your cart is empty.</p>
    }
</div>

@section Scripts {
    <script>
        function updateQuantity(cartId, change) {
            var quantityInput = $('#quantity_' + cartId);
            var currentQuantity = parseInt(quantityInput.val());
            var newQuantity = currentQuantity + change;

            // Ensure the quantity is not less than 1
            if (newQuantity < 1) {
                alert('Minimum quantity is 1. To remove the product, click "Remove".');
                return;
            }

            quantityInput.val(newQuantity);

            // Make AJAX call to update the quantity and subtotal in the database
            $.ajax({
                url: '/Customer/UpdateCartQuantity',
                type: 'POST',
                data: { cartId: cartId, newQuantity: newQuantity },
                success: function (response) {
                    if (response.success) {
                        // Update the subtotal on the UI
                        var subtotal = newQuantity * response.subtotal;
                        $('#subtotal_' + cartId).text(subtotal.toFixed(2));

                        // Update the total price on the UI
                        var total = calculateTotal();
                        $('#totalPrice').text(total.toFixed(2));
                    } else {
                        // Handle the case where the update was not successful
                        alert(response.message);
                    }
                }
               
            });
        }

        function calculateTotal() {
            var total = 0;
            $('.subtotal-column').each(function () {
                total += parseFloat($(this).text());
            });
            return total;
        }

    </script>
}
